class TGBot

  Token = ENV['TG_TOKEN']

  def initialize
    Rails.logger.info 'Bot started'
    @client = Telegram::Bot::Client.new(Token)
  end

  def update(data)
    begin
      update = Telegram::Bot::Types::Update.new(data)

      message = update.message

      process message

    rescue Exception => e
      Rails.logger.error e
      sleep 5000
    end
  end

  private

  def process(msg)
    Rails.logger.debug msg.to_yaml
    case msg
      when Telegram::Bot::Types::InlineQuery
        process_inline msg
      when Telegram::Bot::Types::Message
        process_message msg
      when Telegram::Bot::Types::CallbackQuery
        process_cb msg
    end
  end

  def process_message(message)
    begin
      chat_id = message.chat.id
      history = Dialog.new(message.chat.id,RedisStorage.get_user_session(chat_id))
      case message.text
        when '/start'
          history.clear
          send_reply chat_id,
                     ReplicaService.get_replica_for_state(history.state, message.from.first_name),
                     initial_keyboard
        when '–ß–∞—Ç —Å —Å–∞–Ω—Ç–æ–π  üí¨'
          history.state = 'chat'
          send_reply chat_id,
                     ReplicaService.get_replica_for_state(history.state, message.from.first_name)
        when '–†–µ–π—Ç–∏–Ω–≥ –ø–æ–¥–∞—Ä–∫–æ–≤ üîÑ'
          history.state = 'rating'
          send_reply chat_id,
                     ReplicaService.get_replica_for_state(history.state, message.from.first_name)
        when '–°–∫–∏–¥–∫–∞ –æ—Ç –°–∞–Ω—Ç—ã  üí∞'
          history.state = 'discount'
          send_reply chat_id,
                     ReplicaService.get_replica_for_state(history.state, message.from.first_name)
        when '–ü–∏—Å—å–º–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ ‚úâÔ∏è'
          history.state = 'letter'
          send_reply chat_id,
                     ReplicaService.get_replica_for_state(history.state, message.from.first_name)
        when "–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç üë®‚Äçüë©‚Äçüëß‚Äçüëß" #only doublequoted
          history.state = 'groupchat'
          send_reply chat_id,
                     ReplicaService.get_replica_for_state(history.state, message.from.first_name)
        else
          case history.state
            when 'chat'
              history.state = 'chat_two'
              send_reply chat_id,
                         ReplicaService.get_replica_for_state(history.state, message.text)
            when 'chat_two'
              history.state = 'chat_three'
              send_reply chat_id,
                         ReplicaService.get_replica_for_state(history.state, message.text)
            when 'letter'
              history.state = 'letter_two'
              send_reply chat_id,
                         ReplicaService.get_replica_for_state(history.state, message.text)
            else
              history.state = 'unknown'
              send_reply chat_id,
                         ReplicaService.get_replica_for_state(history.state, message.from.first_name),
                         initial_keyboard

          end
      end
      # if ['/start'].include? message.text || history.state == 'finished'
      #
      # elsif history.state != 'finished'
      #
      #   if history.state != 'finished'
      #     send_reply chat_id, ReplicaService.get_replica_for_state(history.state, history.answers[:who])
      #   else
      #     more = Telegram::Bot::Types::KeyboardButton.new text: "–Ø —Ö–æ—á—É –µ—â–µ —Å —Ç–æ–±–æ–π –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å!"
      #     markup = Telegram::Bot::Types::ReplyKeyboardMarkup.new keyboard:[[more]],
      #                                                            one_time_keyboard: true,
      #                                                            resize_keyboard: true
      #     link = QueryService.generate_link(history.answers[:who],history.answers[:hobby],history.answers[:tool])
      #     text = "#{ReplicaService.get_replica_for_state(history.state, history.answers[:who])} #{link}"
      #     send_reply chat_id, text, markup
      #   end
      # end
      RedisStorage.update_user_session chat_id, history
    rescue ApiException => ex
      send_reply message.chat.id, ex.message
    rescue => ex
      Rails.logger.error "Telegram bot  error: #{ex.message}"
      send_reply message.chat.id, '–£–ø—Å, —É –º–µ–Ω—è —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.'
    end
  end

  def process_cb (msg)

  end

  def send_reply(chat_id, text, keyboard=nil)
    @client.api.send_message chat_id: chat_id,
                          reply_markup: keyboard,
                          text: text
  end


  def send_link id,uname,name,link
    @client.api.send_message chat_id: id,
                          reply_markup: markup,
                          text: "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, #{uname}! –í–æ—Ç –∑–¥–µ—Å—å —Ç—ã —Å–≤–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π #{name}: [#{link}]",
                          parse_mode: 'Markdown'
  end

  def initial_keyboard
    chat = Telegram::Bot::Types::KeyboardButton.new text: "–ß–∞—Ç —Å —Å–∞–Ω—Ç–æ–π  üí¨"
    rating = Telegram::Bot::Types::KeyboardButton.new text: "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–¥–∞—Ä–∫–æ–≤ üîÑ"
    discount = Telegram::Bot::Types::KeyboardButton.new text: "–°–∫–∏–¥–∫–∞ –æ—Ç –°–∞–Ω—Ç—ã  üí∞"
    letter = Telegram::Bot::Types::KeyboardButton.new text: "–ü–∏—Å—å–º–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ ‚úâÔ∏è"
    group = Telegram::Bot::Types::KeyboardButton.new text: "–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç üë®‚Äçüë©‚Äçüëß‚Äçüëß"
    Telegram::Bot::Types::ReplyKeyboardMarkup.new keyboard:[[chat,rating],[discount,letter],[group]],
                                                           resize_keyboard: true
  end

end