class FBBot
  include Facebook::Messenger

  Bot.on :message do |message|
    begin
      chat_id = message.sender[:id]
      history = Dialog.new(chat_id,RedisStorage.get_user_session(chat_id))
      case history.state
        when 'chat'
          history.state = 'chat_two'
          self.reply message,
                     ReplicaService.get_replica_for_state(history.state, message.text)
        when 'chat_two'
          history.state = 'chat_three'
          self.reply message,
                     ReplicaService.get_replica_for_state(history.state, message.text)
        when 'letter'
          history.state = 'letter_two'
          self.reply message,
                     ReplicaService.get_replica_for_state(history.state, message.text)
        else
          history.state = 'unknown'
          self.reply message,
                     ReplicaService.get_replica_for_state(history.state, message.text),
                     self.initial_keyboard
          self.reply message,
                     ReplicaService.get_replica_for_state(history.state, message.text),
                     self.initial_keyboard_part_two

      end
      RedisStorage.update_user_session chat_id, history
    rescue ApiException => ex
      self.reply message, ex.message
    rescue => ex
      Rails.logger.error "Facebook bot  error: #{ex.message}"
      self.reply message, '–£–ø—Å, —É –º–µ–Ω—è —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.'
    end
  end

  Bot.on :postback do |postback|
    begin
      chat_id = postback.sender[:id]
      history = Dialog.new(chat_id,RedisStorage.get_user_session(chat_id))
      history.state = postback.payload
      self.reply postback,
                 ReplicaService.get_replica_for_state(history.state,'dummy')
      RedisStorage.update_user_session chat_id, history
    rescue ApiException => ex
      self.reply postback, ex.message
    rescue => ex
      Rails.logger.error "Facebook bot  error: #{ex.message}"
      self.reply postback, '–£–ø—Å, —É –º–µ–Ω—è —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.'
    end
  end

  def self.reply message, text=nil , keyboard = nil
    if text.nil?
      message.reply(text: text)
    else
      message.reply(attachment: keyboard)
    end
  end

  def self.initial_keyboard
    {
        type: 'template',
        payload: {
            template_type: 'button',
            text: '–ü—Ä–∏–≤–µ—Ç, —è - –°–∞–Ω—Ç–∞ –±–æ—Ç. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫. –¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –æ—Ç—Å—é–¥–∞',
            buttons: [
                { type: 'postback', title: '–†–µ–π—Ç–∏–Ω–≥ –ø–æ–¥–∞—Ä–∫–æ–≤ üîÑ', payload: 'rating' },
                { type: 'postback', title: '–°–∫–∏–¥–∫–∞ –æ—Ç –°–∞–Ω—Ç—ã  üí∞', payload: 'discount' },
            ]
        }
    }
  end

  def self.initial_keyboard_part_two
    {
        type: 'template',
        payload: {
            template_type: 'button',
            text: '–ò–ª–∏ –º—ã –º–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫',
            buttons: [
                { type: 'postback', title: '–ß–∞—Ç —Å —Å–∞–Ω—Ç–æ–π  üí¨', payload: 'chat' },
                { type: 'postback', title: '–ü–∏—Å—å–º–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ ‚úâ', payload: 'letter' },
                { type: 'postback', title: '–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç üë®‚Äçüë©‚Äçüëß‚Äçüëß', payload: 'groupchat' },
            ]
        }
    }
  end
end